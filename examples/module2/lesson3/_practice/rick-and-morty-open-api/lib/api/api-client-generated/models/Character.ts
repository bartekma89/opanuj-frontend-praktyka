/* tslint:disable */
/* eslint-disable */
/**
 * Rick and Morty API
 * Access information about characters from Rick and Morty.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { CharacterOrigin } from './CharacterOrigin';
import {
    CharacterOriginFromJSON,
    CharacterOriginFromJSONTyped,
    CharacterOriginToJSON,
} from './CharacterOrigin';
import type { CharacterLocation } from './CharacterLocation';
import {
    CharacterLocationFromJSON,
    CharacterLocationFromJSONTyped,
    CharacterLocationToJSON,
} from './CharacterLocation';

/**
 * 
 * @export
 * @interface Character
 */
export interface Character {
    /**
     * The id of the character.
     * @type {number}
     * @memberof Character
     */
    id: number;
    /**
     * The name of the character.
     * @type {string}
     * @memberof Character
     */
    name: string;
    /**
     * The status of the character (Alive, Dead or unknown).
     * @type {string}
     * @memberof Character
     */
    status: string;
    /**
     * The species of the character.
     * @type {string}
     * @memberof Character
     */
    species: string;
    /**
     * The type or subspecies of the character.
     * @type {string}
     * @memberof Character
     */
    type: string;
    /**
     * The gender of the character.
     * @type {string}
     * @memberof Character
     */
    gender: string;
    /**
     * 
     * @type {CharacterOrigin}
     * @memberof Character
     */
    origin: CharacterOrigin;
    /**
     * 
     * @type {CharacterLocation}
     * @memberof Character
     */
    location: CharacterLocation;
    /**
     * Link to the character's image.
     * @type {string}
     * @memberof Character
     */
    image: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof Character
     */
    episode: Array<string>;
    /**
     * Link to the character's own URL endpoint.
     * @type {string}
     * @memberof Character
     */
    url: string;
    /**
     * Time at which the character was created in the database.
     * @type {Date}
     * @memberof Character
     */
    created: Date;
}

/**
 * Check if a given object implements the Character interface.
 */
export function instanceOfCharacter(value: object): value is Character {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('status' in value) || value['status'] === undefined) return false;
    if (!('species' in value) || value['species'] === undefined) return false;
    if (!('type' in value) || value['type'] === undefined) return false;
    if (!('gender' in value) || value['gender'] === undefined) return false;
    if (!('origin' in value) || value['origin'] === undefined) return false;
    if (!('location' in value) || value['location'] === undefined) return false;
    if (!('image' in value) || value['image'] === undefined) return false;
    if (!('episode' in value) || value['episode'] === undefined) return false;
    if (!('url' in value) || value['url'] === undefined) return false;
    if (!('created' in value) || value['created'] === undefined) return false;
    return true;
}

export function CharacterFromJSON(json: any): Character {
    return CharacterFromJSONTyped(json, false);
}

export function CharacterFromJSONTyped(json: any, ignoreDiscriminator: boolean): Character {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'name': json['name'],
        'status': json['status'],
        'species': json['species'],
        'type': json['type'],
        'gender': json['gender'],
        'origin': CharacterOriginFromJSON(json['origin']),
        'location': CharacterLocationFromJSON(json['location']),
        'image': json['image'],
        'episode': json['episode'],
        'url': json['url'],
        'created': (new Date(json['created'])),
    };
}

export function CharacterToJSON(value?: Character | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'id': value['id'],
        'name': value['name'],
        'status': value['status'],
        'species': value['species'],
        'type': value['type'],
        'gender': value['gender'],
        'origin': CharacterOriginToJSON(value['origin']),
        'location': CharacterLocationToJSON(value['location']),
        'image': value['image'],
        'episode': value['episode'],
        'url': value['url'],
        'created': ((value['created']).toISOString()),
    };
}

